import json
import random

from .plot_params import *


chart_examples = {
"bar": [
    {
    "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['CNN', 'RNN', 'Transformer', 'GAN']\nabr_labels = ['Algorithm', 'Benchmark', 'Result']\nvalues = {\n    'CNN': [85, 78, 92],\n    'RNN': [80, 75, 89],\n    'Transformer': [90, 85, 95],\n    'GAN': [82, 80, 88]\n}\n\n# Set y positions for the bars\ny_pos = np.arange(len(categories))\n\n# Set the width for each bar\nbar_width = 0.2\n\n# Plot bars for each category\nfor i, abr in enumerate(abr_labels):\n    # Calculate the position for each ABR bar\n    plt.barh(y_pos + i * bar_width, \n             [values[cat][i] for cat in categories], \n             height=bar_width, \n             label=abr)\n\n# Add labels to y-axis\nplt.yticks(y_pos + bar_width, categories)\n\n# Add title and labels\nplt.xlabel('Scores')\nplt.title('Performance of AI Models')\n\n# Show legend\nplt.legend()\n\n# Display the plot\nplt.show()"
    }, 
    {
    "import matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot()\n\ngrade = [\"5th\", \"6th\", \"7th\", \"8th\"]\nmath = [75, 80, 85, 90]\nscience = [80, 85, 90, 95]\nenglish = [90, 95, 98, 100]\n\nax.bar(grade, math, color=\"blue\", label=\"Math\")\nax.bar(grade, science, bottom=math, color=\"orange\", label=\"Science\")\nax.bar(grade, english, bottom=[math[i]+science[i] for i in range(len(math))], color=\"green\", label=\"English\")\n\nplt.title('Academic scores in three subjects for grades 5th to 8th in 2021')\nplt.xlabel('Grade')\nplt.ylabel('Score (%)')\nplt.xticks(rotation=0)\nplt.legend(loc=\"upper left\")\nplt.tight_layout()\nplt.show()\nplt.clf()"
    },
    {
    "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nCountry = ['USA','UK','Germany','France']\nManufacturing_Output = [800,700,600,500]\nAgricultural_Output = [200,400,350,450]\nService_Output = [500,600,400,350]\n\nfig = plt.figure(figsize=(12,8))\nax = fig.add_subplot(111)\n\nax.bar(Country, Manufacturing_Output, width=0.5, label=\"Manufacturing Output\")\nax.bar(Country, Agricultural_Output, bottom=Manufacturing_Output, width=0.5, label=\"Agricultural Output\")\nax.bar(Country, Service_Output, bottom=[x + y for x, y in zip(Manufacturing_Output,Agricultural_Output)], width=0.5, label=\"Service Output\")\n\nax.set_title(\"Manufacturing, Agricultural, and Service Output in four countries in 2021\")\nax.set_ylabel(\"Output (million)\")\nax.set_xlabel(\"Country\")\nax.legend(loc=\"best\")\nax.grid(True)\n\nfor i, v in enumerate(Manufacturing_Output):\n    ax.text(i - 0.2, v + 10, str(v))\n\nfor i, v in enumerate(Agricultural_Output):\n    ax.text(i - 0.2, v + Manufacturing_Output[i] + 10, str(v))\n\nfor i, v in enumerate(Service_Output):\n    ax.text(i - 0.2, v + Manufacturing_Output[i] + Agricultural_Output[i] + 10, str(v))\n\nplt.tight_layout()\nplt.xticks(Country)\nplt.savefig('Bar Chart/png/514.png')\nplt.clf()" 
    },
    {
    "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first subplot\ncategories1 = ['CNN', 'RNN', 'Transformer', 'GAN']\nvalues1 = [85, 80, 90, 82]\ncolors1 = ['#ff9999', '#66b3ff', '#99ff99', '#ffcc99']\n\n# Data for the second subplot\ncategories2 = ['DNN', 'LSTM', 'BERT', 'VAE']\nvalues2 = [88, 83, 93, 87]\ncolors2 = ['#ffb3e6', '#c2c2f0', '#ffb3b3', '#c2f0c2']\n\n# Create a figure and two subplots (1 row, 2 columns)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6))\n\n# First subplot\nbars1 = ax1.barh(np.arange(len(categories1)), values1, color=colors1, edgecolor='black', height=0.6)\nax1.set_yticks(np.arange(len(categories1)))\nax1.set_yticklabels(categories1)\nax1.set_xlabel('Scores', fontsize=12)\nax1.set_title('Model Performance (Group 1)', fontsize=14)\nax1.grid(True, which='both', axis='x', linestyle='--', alpha=0.7)\n\n# Add values at the end of each bar in the first subplot\nfor bar in bars1:\n    ax1.text(bar.get_width() + 1, bar.get_y() + bar.get_height()/2, \n             f'{bar.get_width():.1f}', va='center', fontsize=12, color='black')\n\n# Second subplot\nbars2 = ax2.barh(np.arange(len(categories2)), values2, color=colors2, edgecolor='black', height=0.6)\nax2.set_yticks(np.arange(len(categories2)))\nax2.set_yticklabels(categories2)\nax2.set_xlabel('Scores', fontsize=12)\nax2.set_title('Model Performance (Group 2)', fontsize=14)\nax2.grid(True, which='both', axis='x', linestyle='--', alpha=0.7)\n\n# Add values at the end of each bar in the second subplot\nfor bar in bars2:\n    ax2.text(bar.get_width() + 1, bar.get_y() + bar.get_height()/2, \n             f'{bar.get_width():.1f}', va='center', fontsize=12, color='black')\n\n# Add a common title for the entire figure\nfig.suptitle('AI Model Performance Comparison', fontsize=16, weight='bold')\n\n# Adjust layout for better spacing\nplt.tight_layout(rect=[0, 0, 1, 0.95])\n\n# Display the plot\nplt.show()"
    }
],

"line": [
    {
    "\nimport matplotlib.pyplot as plt\nimport numpy as np\n \nx = np.array([2001, 2002, 2003, 2004])\ny1 = np.array([200, 220, 190, 250])\ny2 = np.array([180, 210, 230, 220])\ny3 = np.array([100, 120, 110, 130])\n \nplt.figure(figsize=(10, 6))\nplt.plot(x, y1, label=\"Music Albums Sold(million)\", color='red', marker='o', linestyle='--', linewidth=2)\nplt.plot(x, y2, label=\"Movie Tickets Sold(million)\", color='blue', marker='^', linestyle='-', linewidth=2)\nplt.plot(x, y3, label=\"Art Gallery Visits(million)\", color='green', marker='s', linestyle=':', linewidth=2)\n \nplt.title(\"Arts and culture industry visits and sales in the early 2000s\")\nplt.xlabel('Year')\nplt.ylabel('Number')\nplt.xticks(x)\nplt.legend()\n \nfor a, b, c in zip(x, y1, y2):\n    plt.text(a, b + 0.05, '%.0f' % b, ha='center', va='bottom', fontsize=10)\n    plt.text(a, c + 0.05, '%.0f' % c, ha='center', va='bottom', fontsize=10)\nplt.text(2004, y3[-1] + 0.05, '%.0f' % y3[-1], ha='center', va='bottom', fontsize=10)\n \nplt.savefig('line chart/png/134.png')\nplt.tight_layout()\nplt.clf()"
    },
    {
    "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# data\nx = np.arange(1, 6) # Month\nPrice_A = [20, 25, 22, 30, 27]\nPrice_B = [30, 35, 32, 40, 37]\nPrice_C = [18, 20, 15, 20, 17]\nPrice_D = [25, 30, 27, 35, 32]\n\n# create figure\nplt.figure(figsize=(10,6))\n\n# create a subplot\nax=plt.subplot()\n\n# plot the data\nax.plot(x, Price_A, color='red', marker='o', label='Price A')\nax.plot(x, Price_B, color='blue', marker='o', label='Price B')\nax.plot(x, Price_C, color='green', marker='o', label='Price C')\nax.plot(x, Price_D, color='black', marker='o', label='Price D')\n\n# set x ticks\nax.set_xticks(x)\n\n# setting the limit of x axis\nax.set_xlim(1, 5)\n\n# setting the grid\nax.grid(linestyle='--', alpha=0.5)\n\n# set the title\nax.set_title('Average prices of four food items in the US in 2021')\n\n# set the xlabel and ylabel\nax.set_xlabel('Month')\nax.set_ylabel('Price (dollars)')\n\n# set the legend\nax.legend(loc='upper left', bbox_to_anchor=(1, 1))\n\n# tight the layout\nplt.tight_layout()\n\n# save the figure\nplt.savefig('line chart/png/546.png')\n\n# clear the current figure\nplt.clf()"
    },
    {   
    "\"\n# Part 1: Importing Libraries\n\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as mcolors\n\n\"\n# Part 2: Data Preparation\n\"\n# Sample data for plotting\ntasks = np.arange(1, 11)\nmodel_ResNet50 = np.random.uniform(60, 95, size=len(tasks))\nmodel_VGG16 = np.random.uniform(55, 90, size=len(tasks))\nmodel_InceptionV3 = np.random.uniform(50, 85, size=len(tasks))\nmodel_EfficientNet = np.random.uniform(65, 100, size=len(tasks))\n\n# Labels for lines\nline_label_ResNet50 = \"ResNet50\\n(Residual Network)\"\nline_label_VGG16 = \"VGG16\\n(Deep CNN)\"\nline_label_InceptionV3 = \"InceptionV3\\n(Inception Network)\"\nline_label_EfficientNet = \"EfficientNet\\n(Scaled Network)\"\n\n# Plot configuration\nxlim_values = [1, 10]\nylim_values = [0, 110]\nxlabel_value = \"Tasks\"\nylabel_value = \"Performance (%)\"\nxticks_values = np.arange(1, 11, 1)\nyticks_values = np.arange(0, 111, 10)\n\n\"\n# Part 3: Plot Configuration and Rendering\n\"\n# Create a figure and axes for two subplots\nfig, axs = plt.subplots(1, 2, figsize=(14, 6), sharey=True)\n\n# Plot on the first subplot\naxs[0].plot(\n    tasks, model_ResNet50, marker=\"o\", color=\"#1f77b4\", label=line_label_ResNet50, linestyle=\"-\", linewidth=2\n)\naxs[0].plot(\n    tasks, model_VGG16, marker=\"s\", color=\"#ff7f0e\", label=line_label_VGG16, linestyle=\"--\", linewidth=2\n)\naxs[0].plot(\n    tasks, model_InceptionV3, marker=\"^\", color=\"#2ca02c\", label=line_label_InceptionV3, linestyle=\"-.\", linewidth=2\n)\naxs[0].plot(\n    tasks, model_EfficientNet, marker=\"D\", color=\"#d62728\", label=line_label_EfficientNet, linestyle=\":\" , linewidth=2\n)\naxs[0].set_title('Performance of Different Models (Subplot 1)')\naxs[0].set_xlim(xlim_values)\naxs[0].set_ylim(ylim_values)\naxs[0].set_xlabel(xlabel_value, fontsize=12)\naxs[0].set_ylabel(ylabel_value, fontsize=12)\naxs[0].set_xticks(xticks_values)\naxs[0].set_yticks(yticks_values)\naxs[0].legend()\naxs[0].grid(True, linestyle=\"--\", linewidth=0.5)\n\n# Plot on the second subplot\naxs[1].plot(\n    tasks, model_ResNet50, marker=\"o\", color=\"#1f77b4\", label=line_label_ResNet50, linestyle=\"-\", linewidth=2\n)\naxs[1].plot(\n    tasks, model_VGG16, marker=\"s\", color=\"#ff7f0e\", label=line_label_VGG16, linestyle=\"--\", linewidth=2\n)\naxs[1].plot(\n    tasks, model_InceptionV3, marker=\"^\", color=\"#2ca02c\", label=line_label_InceptionV3, linestyle=\"-.\", linewidth=2\n)\naxs[1].plot(\n    tasks, model_EfficientNet, marker=\"D\", color=\"#d62728\", label=line_label_EfficientNet, linestyle=\":\" , linewidth=2\n)\naxs[1].set_title('Performance of Different Models (Subplot 2)')\naxs[1].set_xlim(xlim_values)\naxs[1].set_ylim(ylim_values)\naxs[1].set_xlabel(xlabel_value, fontsize=12)\naxs[1].set_xticks(xticks_values)\naxs[1].legend()\naxs[1].grid(True, linestyle=\"--\", linewidth=0.5)\n\n# Set the background color of the plots\nfor ax in axs:\n    ax.set_facecolor(\n        mcolors.LinearSegmentedColormap.from_list(\"custom\", [\"#f0f0f0\", \"#ffffff\"])(0.8)\n    )\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('xxx.pdf', bbox_inches='tight')\n\n# Show the plot\nplt.show()"
    },
    {
    "import matplotlib.pyplot as plt\nimport numpy as np\n\n#  Part 1: Data Preparation \n# Time data (representing months)\nmonths = np.arange(1, 13)\n\n# Stock prices of three companies with some random fluctuations and errors\ncompany_A = np.array([100, 105, 102, 107, 110, 115, 120, 125, 123, 130, 128, 135])\ncompany_B = np.array([95, 98, 100, 102, 105, 107, 110, 112, 115, 118, 120, 122])\ncompany_C = np.array([90, 92, 94, 97, 95, 100, 105, 108, 110, 112, 115, 117])\n\n# Error values (for error bars)\nerror_A = np.random.uniform(2, 4, len(months))\nerror_B = np.random.uniform(1, 3, len(months))\nerror_C = np.random.uniform(1, 2, len(months))\n\n# Interest rates of three countries\ncountry_X = np.array([1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.3, 2.4, 2.5, 2.6, 2.7])\ncountry_Y = np.array([0.5, 0.6, 0.65, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5])\ncountry_Z = np.array([3.0, 3.2, 3.1, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 4.0, 4.1, 4.2])\n\n# Error values for interest rates\nerror_X = np.random.uniform(0.05, 0.1, len(months))\nerror_Y = np.random.uniform(0.02, 0.07, len(months))\nerror_Z = np.random.uniform(0.08, 0.12, len(months))\n\n#  Part 2: Plotting the Data \nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 8))\n\n# Plotting the stock prices with error bars (Top plot)\nax1.errorbar(months, company_A, yerr=error_A, label='Company A', fmt='-o', capsize=5)\nax1.errorbar(months, company_B, yerr=error_B, label='Company B', fmt='-s', capsize=5)\nax1.errorbar(months, company_C, yerr=error_C, label='Company C', fmt='-^', capsize=5)\nax1.set_title('Stock Prices Over Time')\nax1.set_xlabel('Months')\nax1.set_ylabel('Stock Price ($)')\nax1.legend()\nax1.grid(True)\n\n# Plotting the interest rates with error bars (Bottom plot)\nax2.errorbar(months, country_X, yerr=error_X, label='Country X', fmt='-o', capsize=5)\nax2.errorbar(months, country_Y, yerr=error_Y, label='Country Y', fmt='-s', capsize=5)\nax2.errorbar(months, country_Z, yerr=error_Z, label='Country Z', fmt='-^', capsize=5)\nax2.set_title('Interest Rates Over Time')\nax2.set_xlabel('Months')\nax2.set_ylabel('Interest Rate (%)')\nax2.legend()\nax2.grid(True)\n\n#  Part 3: Final Adjustments \nplt.tight_layout()\nplt.savefig('xxxx.png')\nplt.show()"
    },
    {
    "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Example data for computer science domain (e.g., Comparison of Two Algorithms Efficiency Over Time)\n# Simulating computational tasks where the efficiency of two algorithms improves over time with fluctuations\nx = np.linspace(0, 10, 100)  # Time (e.g., in seconds)\n\n# Algorithm A - more fluctuations in efficiency\nmean_efficiency_A = np.log1p(x) + 0.2 * np.sin(2 * np.pi * x / 5)  # Simulated mean efficiency with fluctuations\nstd_dev_efficiency_A = 0.2 + 0.05 * np.abs(np.sin(x))  # Simulated standard deviation for Algorithm A\n\n# Algorithm B - more fluctuations in efficiency\nmean_efficiency_B = 0.5 * x + 0.3 * np.sin(2 * np.pi * x / 3)  # Simulated mean efficiency with fluctuations\nstd_dev_efficiency_B = 0.3 + 0.03 * np.abs(np.cos(x))  # Simulated standard deviation for Algorithm B\n\n# Create the plot\nplt.figure(figsize=(10, 6))\n\n# Plot the mean line of efficiency for Algorithm A\nplt.plot(x, mean_efficiency_A, label='Algorithm A - Mean Efficiency', color='green')\nplt.fill_between(x, mean_efficiency_A - std_dev_efficiency_A, mean_efficiency_A + std_dev_efficiency_A, \n                 color='green', alpha=0.3, label='Algorithm A - Standard Deviation')\n\n# Plot the mean line of efficiency for Algorithm B\nplt.plot(x, mean_efficiency_B, label='Algorithm B - Mean Efficiency', color='blue')\nplt.fill_between(x, mean_efficiency_B - std_dev_efficiency_B, mean_efficiency_B + std_dev_efficiency_B, \n                 color='blue', alpha=0.3, label='Algorithm B - Standard Deviation')\n\n# Add labels and title\nplt.title('Algorithm Efficiency Comparison Over Time with Variance and Fluctuations', fontsize=16)\nplt.xlabel('Time (seconds)', fontsize=14)\nplt.ylabel('Efficiency', fontsize=14)\n\n# Show the legend\nplt.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n"
    }

],

"pie": [
    {
    "\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(8,8))\nlabels = ['Automotive', 'Electronics', 'Industrial Machinery', 'Food & Beverage', 'Chemicals', 'Textiles', 'Plastics', 'Metals', 'Other']\nsizes = [30,20,15,10,10,10,5,5,5]\nexplode = (0.1, 0, 0, 0, 0, 0, 0, 0, 0)\nplt.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)\nplt.title(\"Distribution of Manufacturing and Production Output in 2023\")\nplt.xticks(rotation=90, wrap=True)\nplt.tight_layout()\nplt.savefig('distribution_pie.png')\nplt.clf()"
    },
    {
    "import matplotlib.pyplot as plt\n\n# Creating figure with two subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 8))\n\n# Data for Fossil Fuels (left pie chart)\nlabels_fossil = ['Coal', 'Oil', 'Natural Gas']\nsizes_fossil = [40, 35, 25]  # Example data in percentage\nwedges_fossil, texts_fossil, autotexts_fossil = ax1.pie(sizes_fossil, labels=labels_fossil, autopct='%1.1f%%', textprops={'fontsize': 12}, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures the pie is drawn as a circle\nax1.set_title('Global Fossil Fuel Consumption, 2023', fontsize=14)\n\n# Adding legend to the first pie chart\nax1.legend(wedges_fossil, labels_fossil, loc='upper left', bbox_to_anchor=(-0.1, 1.05), fontsize=12)\n\n# Data for Renewable Energy (right pie chart)\nlabels_renewable = ['Solar Energy', 'Wind Energy', 'Hydropower', 'Geothermal Energy', 'Biomass']\nsizes_renewable = [25, 25, 20, 15, 15]  # Example data in percentage\nwedges_renewable, texts_renewable, autotexts_renewable = ax2.pie(sizes_renewable, labels=labels_renewable, autopct='%1.1f%%', textprops={'fontsize': 12}, startangle=90)\nax2.axis('equal')\nax2.set_title('Global Renewable Energy Consumption, 2023', fontsize=14)\n\n# Adding legend to the second pie chart\nax2.legend(wedges_renewable, labels_renewable, loc='upper left', bbox_to_anchor=(1.0, 1.05), fontsize=12)\n\n# Adding tight layout and saving figure\nplt.tight_layout()\nplt.savefig('two_pie_charts_with_legend.png')\nplt.show()"
    },
    {
    "\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import pie, axis, title, legend\n\n#Creating figure\nfig = plt.figure(figsize=(10,8))\n\n#Data\nlabels = ['Solar Energy','Wind Energy','Hydropower','Geothermal Energy','Biomass']\nsizes = [25,25,20,15,15]\n\n#Plotting Pie Chart\nax = fig.add_subplot()\nax.pie(sizes, labels=labels, autopct='%1.1f%%', textprops={'fontsize':14},startangle=90)\nax.axis('equal')\ntitle('Distribution of Renewable Energy Sources in the USA, 2023')\nlegend(labels, loc='upper left', bbox_to_anchor=(-0.1, 1.), fontsize=14)\n\n#Saving Figure\nplt.tight_layout()\nplt.savefig('pie chart/png/228.png')\nplt.clf()"
    }
],

"bar_num":[
    {
    "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nyears = [2018,2019,2020,2021]\nPsychology = [180,200,190,200]\nSociology = [150,180,190,240]\nAnthropology = [100,120,140,160]\n\nfig = plt.figure(figsize=(12, 9))\nax = fig.add_subplot(111)\n\nax.set_title('Number of publications in Social Sciences and Humanities from 2018 to 2021')\n\nbar_width = 0.2\n\nbars1 = ax.bar(np.array(years)-bar_width,Psychology,width=bar_width,align='center',label='Psychology',color='#1f77b4')\nbars2 = ax.bar(np.array(years),Sociology,width=bar_width,align='center',label='Sociology',color='#ff7f0e')\nbars3 = ax.bar(np.array(years)+bar_width,Anthropology,width=bar_width,align='center',label='Anthropology',color='#2ca02c')\n\nax.set_xticks(years)\n\nax.set_ylabel('Number of Publications')\nax.set_xlabel('Years')\n\nax.legend()\n\nfor bar1, bar2,bar3 in zip(bars1, bars2,bars3):\n    ax.annotate(\"%.0f\" % bar1.get_height(),\n                xy=(bar1.get_x() + bar1.get_width() / 2, bar1.get_height()),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n    ax.annotate(\"%.0f\" % bar2.get_height(),\n                xy=(bar2.get_x() + bar2.get_width() / 2, bar2.get_height()),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n    ax.annotate(\"%.0f\" % bar3.get_height(),\n                xy=(bar3.get_x() + bar3.get_width() / 2, bar3.get_height()),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\nplt.tight_layout()\nplt.savefig(r'xxx.png')\nplt.clf()"
    },
    {
    "\nimport matplotlib.pyplot as plt\n\nCountry = [\"USA\", \"UK\", \"Germany\", \"France\"]\nOnline_Shopping = [430, 500, 700, 650]\nRetail_Shopping = [400, 450, 410, 350]\n\nfig = plt.figure(figsize=(6, 5))\nax = fig.add_subplot()\nax.bar(Country, Online_Shopping, label='Online Shopping', bottom=Retail_Shopping)\nax.bar(Country, Retail_Shopping, label='Retail Shopping')\nfor i, v in enumerate(Online_Shopping):\n    ax.text(i-0.2, v/2+Retail_Shopping[i], str(v), color='black', fontsize=12, fontweight='bold')\nfor i, v in enumerate(Retail_Shopping):\n    ax.text(i-0.2, v/2, str(v), color='black', fontsize=12, fontweight='bold')\nplt.title(\"Comparison of online and retail shopping in four countries in 2021\")\nplt.legend()\nplt.xticks(Country)\nplt.tight_layout()\nplt.savefig('xxx.png')\nplt.clf()"
    },
    {
    "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Data for the left subplot (AI Publications per year)\nyears = [2018, 2019, 2020, 2021, 2022]\npublications = [1500, 1800, 2200, 3000, 3500]\n\n# Data for the right subplot (AI Funding per year in billions)\nfunding = [50, 65, 85, 110, 140]\n\n# Setup figure and subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 7))\n\n# Bar colors and edge colors\ncolors_publications = ['#ff9999', '#66b3ff', '#99ff99', '#ffcc99', '#c2c2f0']\ncolors_funding = ['#ffb3e6', '#c2f0c2', '#ff6666', '#66b3ff', '#ffcc99']\nedge_color = 'black'  # Outline color for the bars\n\n# Left subplot - AI Publications\nbars1 = ax1.bar(years, publications, color=colors_publications, edgecolor=edge_color)\nax1.set_title('AI Publications by Year', fontsize=14, pad=20)\nax1.set_xlabel('Year', fontsize=12)\nax1.set_ylabel('Number of Publications', fontsize=12)\nax1.legend(['Publications'], fontsize=12)\n\n# Adding annotations for AI Publications\nfor i, bar in enumerate(bars1):\n    ax1.text(bar.get_x() + bar.get_width() / 2, bar.get_height() + 50, \n             f'{publications[i]}', ha='center', va='bottom', fontsize=12, color='black')\n\n# Right subplot - AI Funding\nbars2 = ax2.bar(years, funding, color=colors_funding, edgecolor=edge_color)\nax2.set_title('AI Funding by Year (in Billions)', fontsize=14, pad=20)\nax2.set_xlabel('Year', fontsize=12)\nax2.set_ylabel('Funding (Billions $)', fontsize=12)\nax2.legend(['Funding'], fontsize=12)\n\n# Adding annotations for AI Funding\nfor i, bar in enumerate(bars2):\n    ax2.text(bar.get_x() + bar.get_width() / 2, bar.get_height() + 2, \n             f'{funding[i]}B', ha='center', va='bottom', fontsize=12, color='black')\n\n# Layout adjustments\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('ai_publications_funding_with_outline.png', bbox_inches='tight')\n\n# Show plot\nplt.show()"
    },
    {
    "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Data for the top subplot (Number of Research Papers)\nmodels = ['ViT', 'BERT', 'GPT', 'ResNet']\npapers_2021 = [1200, 2500, 1800, 1600]\npapers_2022 = [1500, 2700, 1900, 1800]\n\n# Data for the bottom subplot (Model Training Time in hours)\ntraining_time_2021 = [50, 75, 100, 45]\ntraining_time_2022 = [55, 80, 110, 50]\n\n# Setup figure and subplots (2 rows, 1 column)\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10))\n\n# Bar width and spacing\nbar_width = 0.35\nx = np.arange(len(models))  # Label locations for models\n\n# Bar colors and edge colors (same color for the same year)\ncolor_2021 = '#66b3ff'  # Blue for 2021\ncolor_2022 = '#ff9999'  # Red for 2022\nedge_color = 'black'  # Outline color for the bars\n\n# Top subplot - Number of Research Papers\nbars1 = ax1.bar(x - bar_width/2, papers_2021, width=bar_width, color=color_2021, edgecolor=edge_color, label='2021')\nbars2 = ax1.bar(x + bar_width/2, papers_2022, width=bar_width, color=color_2022, edgecolor=edge_color, label='2022')\n\n# Title and labels\nax1.set_title('Number of Research Papers on AI Models (2021 vs 2022)', fontsize=14, pad=20)\nax1.set_xlabel('Models', fontsize=12)\nax1.set_ylabel('Number of Papers', fontsize=12)\nax1.set_xticks(x)\nax1.set_xticklabels(models)\nax1.legend()\n\n# Adding annotations for Number of Research Papers\nfor bar in bars1 + bars2:\n    height = bar.get_height()\n    ax1.text(bar.get_x() + bar.get_width() / 2, height + 30, f'{int(height)}', ha='center', va='bottom', fontsize=11)\n\n# Bottom subplot - Model Training Time\nbars3 = ax2.bar(x - bar_width/2, training_time_2021, width=bar_width, color=color_2021, edgecolor=edge_color, label='2021')\nbars4 = ax2.bar(x + bar_width/2, training_time_2022, width=bar_width, color=color_2022, edgecolor=edge_color, label='2022')\n\n# Title and labels\nax2.set_title('Model Training Time (in Hours, 2021 vs 2022)', fontsize=14, pad=20)\nax2.set_xlabel('Models', fontsize=12)\nax2.set_ylabel('Training Time (hours)', fontsize=12)\nax2.set_xticks(x)\nax2.set_xticklabels(models)\nax2.legend()\n\n# Adding annotations for Model Training Time\nfor bar in bars3 + bars4:\n    height = bar.get_height()\n    ax2.text(bar.get_x() + bar.get_width() / 2, height + 2, f'{int(height)}h', ha='center', va='bottom', fontsize=11)\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('ai_models_research_training_same_color.png', bbox_inches='tight')\n\n# Show plot\nplt.show()"
    }
],

"3d":[
    {
    "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Data\nx_values = ['USA', 'UK', 'France', 'Spain', 'Italy']\ny_values = ['NoT (Millions)', 'ASpT ($)', 'TRfT ($Billions)']\ndata = np.array([[15, 20, 30], [10, 15, 15], [12, 18, 21.6], [8, 14, 11.2], [11, 16, 17.6]])\n\nfig = plt.figure(figsize=(12, 10))\nax = fig.add_subplot(111, projection='3d')\n\ncolors = ['r', 'g', 'b']\nyticks = np.arange(len(y_values))\n\n# Plot bars\nfor k, color in enumerate(colors):\n    xs = np.arange(len(x_values))\n    ys = data[:, k]\n    \n    # Plot bars with color\n    bars = ax.bar(xs, ys, zs=k, zdir='y', color=color, alpha=0.8, edgecolor='black')\n\n\n# Set labels\nax.set_xlabel('Country', labelpad=20)\nax.set_ylabel('Metrics', labelpad=20)\nax.set_zlabel('Values')\nax.set_xticks(np.arange(len(x_values)))\nax.set_xticklabels(x_values, rotation=0, horizontalalignment=\"right\")\nax.set_yticks(yticks)\nax.set_yticklabels(y_values, rotation=45, ha='right')\n\n\n# Title\nplt.title('International Tourism and Hospitality Revenue Analysis by Country')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('xxx', bbox_inches='tight')\n\n# Clear the current figure\nplt.clf()"
    },
    {
    "import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# dataset\ndata = np.array([[60.5, 105, 14.8, 270, 290],\n                 [68.7, 110.3, 16.2, 280, 305],\n                 [71.5, 114.2, 18.3, 290, 320],\n                 [73.1, 115.7, 19.8, 300, 340],\n                 [75.4, 118.0, 20.5, 310, 355]], dtype=np.float32)\n\n# y轴标签\nfood_categories = ['Beef (lbs)', 'Poultry (lbs)', 'Fish (lbs)', 'Fruit (lbs)', 'Vegetables (lbs)']\n\n# x-axis data\nyears = np.array([2018, 2019, 2020, 2021, 2022], dtype=np.int32)\n\n# create 3D figure\nfig = plt.figure(figsize=(10, 7))\nax = fig.add_subplot(111, projection='3d')\n\n# 定义颜色\ncolors = ['#FF6347', '#4682B4', '#32CD32', '#FFD700', '#8A2BE2']\n\n# 绘制3D柱状图\nfor idx in range(len(food_categories)):\n    ax.bar3d(np.arange(len(years)), [idx]*len(years), np.zeros(len(years)),\n             0.5, 0.5, data[:, idx], color=colors[idx], alpha=0.9)\n\n# 设置y轴的刻度和标签\nax.yaxis.set_tick_params(pad=10)\nax.set_yticks(np.arange(len(food_categories)))\nax.set_yticklabels(food_categories, va='center')\n\n# Set the scale and label on the x-axis\nax.set_xticks(np.arange(len(years)))\nax.set_xticklabels(years, rotation=30, ha='center')\n\n# set title\nax.set_title('Annual Food Consumption Trends (2018-2022)', fontsize=14)\n\n# layout adjustment\nplt.tight_layout()\n\n# save image\nplt.savefig('xxxx.png')\n\nplt.cla()\nplt.clf()\nplt.close()"
    },
    {
    "import matplotlib.pyplot as plt\nimport numpy as np\n\ny_values = ['Coal Production (Million Tonnes)', 'Oil Production (Million Barrels)', 'Nuclear Energy Generation (GWh)', 'Renewable Energy Generation (GWh)']\ndata = np.array([[2500, 2900, 3100, 3900], \n                 [2400, 3100, 3200, 4100],\n                 [2550, 3300, 3400, 4500],\n                 [2600, 3500, 3600, 4700],\n                 [2700, 3800, 3800, 5100]])\nx_values = ['2019', '2020', '2021', '2022', '2023']\n\n# set graph\nfig = plt.figure(figsize=(15, 8))\nax = fig.add_subplot(111, projection='3d')\nX = np.arange(len(x_values))\n\n# 更改颜色为不同颜色\ncolors = ['b', 'g', 'orange', 'purple']\n\n# Draw 3D bar plots one by one\nfor i in range(len(y_values)):\n    ax.bar3d(X, [i]*len(x_values), np.zeros(len(x_values)), 1, 1, data[:, i], shade=True, color=colors[i])\n\n# Set axes\nax.set_xticks(X)\nax.set_yticks(range(len(y_values)))\nax.set_xticklabels(x_values, rotation=45)\nax.set_yticklabels(y_values, ha='left')\n\n# Set title\nax.set_title('Energy Production and Generation Trends - 2019 to 2023')\n\n# layout adjustment\nplt.tight_layout()\n\n# save figure\nplt.savefig('xxxx.png')\nplt.clf()\n"
    },
    {
    "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Generate some example data\nx = np.arange(5)\ny = np.arange(4)\nX, Y = np.meshgrid(x, y)\nZ1 = np.random.rand(4, 5) * 10\nZ2 = np.random.rand(4, 5) * 20\n\n# Create a figure and two subplots\nfig = plt.figure(figsize=(15, 7))\n\n# First subplot\nax1 = fig.add_subplot(121, projection='3d')\nax1.bar3d(X.flatten(), Y.flatten(), np.zeros_like(X.flatten()), 1, 1, Z1.flatten(), shade=True, color='r')\nax1.set_title('3D Bar Plot 1')\nax1.set_xlabel('X axis')\nax1.set_ylabel('Y axis')\nax1.set_zlabel('Z axis')\n\n# Second subplot\nax2 = fig.add_subplot(122, projection='3d')\nax2.bar3d(X.flatten(), Y.flatten(), np.zeros_like(X.flatten()), 1, 1, Z2.flatten(), shade=True, color='g')\nax2.set_title('3D Bar Plot 2')\nax2.set_xlabel('X axis')\nax2.set_ylabel('Y axis')\nax2.set_zlabel('Z axis')\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('2d_3d_bar_plots.png')\n\n# Show the figure\nplt.show()"
    },
    {
    "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Generate some example data\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\nz = np.cos(x)\nx2 = np.linspace(0, 10, 100)\ny2 = np.exp(x2 / 3)\nz2 = np.log(x2 + 1)\n\n# Create a figure and two subplots\nfig = plt.figure(figsize=(15, 7))\n\n# First subplot\nax1 = fig.add_subplot(121, projection='3d')\nax1.scatter(x, y, z, c='r', marker='o')\nax1.set_title('3D Scatter Plot 1')\nax1.set_xlabel('X axis')\nax1.set_ylabel('Y axis')\nax1.set_zlabel('Z axis')\n\n# Second subplot\nax2 = fig.add_subplot(122, projection='3d')\nax2.scatter(x2, y2, z2, c='b', marker='^')\nax2.set_title('3D Scatter Plot 2')\nax2.set_xlabel('X axis')\nax2.set_ylabel('Y axis')\nax2.set_zlabel('Z axis')\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('3d_scatter_plots.png')\n\n# Show the figure\nplt.show()"
    }
],

"area":[
    {
    "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create dictionary of data\ndata = {\n    'Category': ['Sociology', 'History', 'Psychology', 'Political Science', 'Literature'],\n    '2019': [300, 250, 280, 200, 150],\n    '2020': [330, 270, 300, 230, 160],\n    '2021': [350, 290, 320, 250, 180],\n    '2022': [360, 310, 330, 260, 200],\n    '2023': [370, 320, 340, 270, 210]\n}\n\n# Convert dictionary to DataFrame\ndf = pd.DataFrame(data)\n\n# Set figure size\nfig, ax = plt.subplots(figsize=(12, 7))\n\n# Set x and y axis ticks and labels\nax.set_xticks(np.arange(len(df['Category'])))\nax.set_xticklabels(df['Category'], rotation=45, ha='right')\nax.set_xlim(-0.5, len(df['Category']) - 0.5)\n\n# Calculate the maximum total value for y-axis limits\nmax_total_value = df.iloc[:, 1:].sum(axis=1).max()\nax.set_ylim(0, np.ceil(max_total_value / 100) * 100)\nax.set_yticks(np.linspace(0, max_total_value, num=6, dtype=int))\n\n# Plot area chart with custom colors\nax.stackplot(df['Category'], df['2019'], df['2020'], df['2021'], df['2022'], df['2023'],\n             labels=df.columns[1:], \n             colors=['#FF9999', '#66B2FF', '#99FF99', '#FFCC99', '#FFCCFF'], \n             alpha=0.7)\n\n# Set background grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5, alpha=0.5)\n\n# Set legend and its properties\nlegend = ax.legend(loc='upper left')\nlegend.get_frame().set_alpha(0.8)\n\n# Add title and labels\nax.set_title('Publications by Social Sciences and Humanities Categories (2019 - 2023)')\nax.set_xlabel('Category')\nax.set_ylabel('Number of Publications')\n\n# Automatically adjust layout\nfig.tight_layout()\n\n# Save the figure\nplt.savefig('output/final/area_chart/png/20231228-140159_66.png', bbox_inches='tight')\n\n# Clear the current figure state\nplt.clf()"
    },
    {
    "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create dictionary of data with computing-related content\ndata = {\n    'Category': ['Software Development', 'Data Science', 'Cybersecurity', 'AI & Machine Learning', 'Networking'],\n    '2019': [500, 600, 400, 450, 350],\n    '2020': [550, 650, 420, 480, 370],\n    '2021': [600, 700, 450, 500, 400],\n    '2022': [650, 750, 480, 520, 430],\n    '2023': [700, 800, 500, 540, 460]\n}\n\n# Convert dictionary to DataFrame\ndf = pd.DataFrame(data)\n\n# Set figure size\nfig, (ax1, ax2) = plt.subplots(nrows=2, ncols=1, figsize=(12, 14))\n\n# Define colors for the plots\ncolors = ['#FF6347', '#FFD700', '#4682B4', '#32CD32', '#FF4500']  # Colors: red, yellow, blue, green, orange\n\n# Set x and y axis ticks and labels for the first subplot\nax1.set_xticks(np.arange(len(df['Category'])))\nax1.set_xticklabels(df['Category'], rotation=45, ha='right')\nax1.set_xlim(-0.5, len(df['Category']) - 0.5)\n\n# Calculate the maximum total value for y-axis limits for the first subplot\nmax_total_value = df.iloc[:, 1:].sum(axis=1).max()\nax1.set_ylim(0, np.ceil(max_total_value / 100) * 100)\nax1.set_yticks(np.linspace(0, max_total_value, num=6, dtype=int))\n\n# Plot area chart with updated colors in the first subplot\nax1.stackplot(df['Category'], df['2019'], df['2020'], df['2021'], df['2022'], df['2023'],\n             labels=df.columns[1:], \n             colors=colors, \n             alpha=0.7)\n\n# Add star markers for the lines in the first subplot\nfor i in range(1, len(df.columns) - 1):\n    ax1.plot(df['Category'], df[df.columns[i]], marker='*', linestyle='-', color=colors[i - 1])\n\n# Set background grid lines for the first subplot\nax1.grid(color='grey', linestyle='--', linewidth=0.5, alpha=0.5)\n\n# Set legend and its properties for the first subplot\nlegend1 = ax1.legend(loc='upper left')\nlegend1.get_frame().set_alpha(0.8)\n\n# Add title and labels for the first subplot\nax1.set_title('Computing-Related Publications by Category (2019 - 2023)')\nax1.set_xlabel('Category')\nax1.set_ylabel('Number of Publications')\n\n# Set x and y axis ticks and labels for the second subplot\nax2.set_xticks(np.arange(len(df['Category'])))\nax2.set_xticklabels(df['Category'], rotation=45, ha='right')\nax2.set_xlim(-0.5, len(df['Category']) - 0.5)\n\n# Calculate the maximum total value for y-axis limits for the second subplot\nax2.set_ylim(0, np.ceil(max_total_value / 100) * 100)\nax2.set_yticks(np.linspace(0, max_total_value, num=6, dtype=int))\n\n# Plot area chart with updated colors in the second subplot\nax2.stackplot(df['Category'], df['2019'], df['2020'], df['2021'], df['2022'], df['2023'],\n             labels=df.columns[1:], \n             colors=colors, \n             alpha=0.7)\n\n# Add star markers for the lines in the second subplot\nfor i in range(1, len(df.columns) - 1):\n    ax2.plot(df['Category'], df[df.columns[i]], marker='*', linestyle='-', color=colors[i - 1])\n\n# Set background grid lines for the second subplot\nax2.grid(color='grey', linestyle='--', linewidth=0.5, alpha=0.5)\n\n# Set legend and its properties for the second subplot\nlegend2 = ax2.legend(loc='upper left')\nlegend2.get_frame().set_alpha(0.8)\n\n# Add title and labels for the second subplot\nax2.set_title('Computing-Related Publications by Category (2019 - 2023)')\nax2.set_xlabel('Category')\nax2.set_ylabel('Number of Publications')\n\n# Automatically adjust layout\nfig.tight_layout()\n\n# Save the figure\nplt.savefig('xxx.png', bbox_inches='tight')\n\n# Clear the current figure state\nplt.clf()"
    },
    {
    "# Part 1: Importing Libraries\nimport matplotlib.pyplot as plt\n\n# Part 2: Data Preparation\n# Data for plotting\nx = [1, 2, 3, 4, 5]\ny1 = [33, 31, 27, 29, 29.5]\ny2 = [29, 27, 21, 23, 24]\ny3 = [26, 25, 12, 14, 15]\ny4 = [21, 22, 17, 10, 8.5]\n\n# Labels for legend\nlabel_activity_net_mIoU = \"ActivityNet mIoU\"\nlabel_breakfast_mof = \"Breakfast MoF\"\nlabel_activity_net_cider = \"ActivityNet CIDEr\"\nlabel_qvhighlights_map = \"QVHighlights mAP\"\n\n# Plot limits\nxlim_values = (1, 5)\nylim_values = (0, 35)\n\n# Axis labels\nxlabel_values = [\"10K\", \"50K\", \"1M\", \"5M\", \"10M\"]\nylabel_values = [0, 10, 20, 30, 34]\n\n# Axis ticks\nxticks_values = x\nyticks_values = [0, 10, 20, 30, 34]\n\n# Horizontal line value\naxhline_value = 30\n\n# Part 3: Plot Configuration and Rendering\n# Plotting the data\nplt.figure(figsize=(9, 8))  # Adjusting figure size to match original image dimensions\nplt.plot(\n    x,\n    y1,\n    \"s-\",\n    clip_on=False,\n    zorder=10,\n    markerfacecolor=\"#ff9999\",\n    markeredgecolor=\"#cc3333\",\n    markersize=10,\n    color=\"#cc3333\",\n    label=label_activity_net_mIoU,\n)\nplt.plot(\n    x,\n    y2,\n    \"s-\",\n    clip_on=False,\n    zorder=10,\n    markerfacecolor=\"#ffcc99\",\n    markeredgecolor=\"#cc9966\",\n    markersize=10,\n    color=\"#cc9966\",\n    label=label_breakfast_mof,\n)\nplt.plot(\n    x,\n    y3,\n    \"s-\",\n    clip_on=False,\n    zorder=10,\n    markerfacecolor=\"#99cc99\",\n    markeredgecolor=\"#339966\",\n    markersize=10,\n    color=\"#339966\",\n    label=label_activity_net_cider,\n)\nplt.plot(\n    x,\n    y4,\n    \"s-\",\n    clip_on=False,\n    zorder=10,\n    markerfacecolor=\"#cccccc\",\n    markeredgecolor=\"#666666\",\n    markersize=10,\n    color=\"#666666\",\n    label=label_qvhighlights_map,\n)\n\n# Filling the area under the curves\nplt.fill_between(x, y1, y2, color=\"#ff9999\", alpha=0.5)\nplt.fill_between(x, y2, y3, color=\"#ffcc99\", alpha=0.5)\nplt.fill_between(x, y3, y4, color=\"#99cc99\", alpha=0.5)\nplt.fill_between(x, y4, color=\"#cccccc\", alpha=0.5)\n\n# Adding a horizontal dashed line at y=axhline_value\nplt.axhline(axhline_value, color=\"black\", linestyle=\"dotted\")\n\n# Setting the x-axis and y-axis limits\nplt.xlim(*xlim_values)\nplt.ylim(*ylim_values)\n\n# Setting the x-axis tick labels\nplt.xticks(xticks_values, xlabel_values)\nplt.yticks(yticks_values, ylabel_values)\n\n# Adding a legend\nplt.legend(loc=\"lower center\", ncol=4, bbox_to_anchor=(0.5, -0.1), frameon=False)\nplt.gca().tick_params(axis=\"both\", which=\"both\", length=0)\n\n# Part 4: Saving Output\nplt.tight_layout()\nplt.savefig(\"area_1.pdf\", bbox_inches=\"tight\")\nplt.clf()"
    }
],

"box":[
    {
    "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Restructure the data\ndata = [[45000, 50000, 70000, 90000, 120000],\n        [25000, 30000, 40000, 60000, 80000],\n        [30000, 35000, 45000, 60000, 75000],\n        [15000, 20000, 25000, 30000, 40000],\n        [10000, 15000, 20000, 25000, 30000]]\noutliers = [[],\n            [120000, 150000],\n            [90000, 100000],\n            [45000],\n            [35000]]\n\n# Plot the chart\nfig = plt.figure(figsize=(10, 7))\nax = fig.add_subplot(111)\nboxprops = dict(linewidth=1.5, color='steelblue')\nmedianprops = dict(linewidth=2, color='darkblue')\nwhiskerprops = dict(linewidth=1.5, color='darkorange')\ncapprops = dict(linewidth=1.5, color='darkorange')\n\nax.boxplot(data, \n           whis=1.5, \n           boxprops=boxprops, \n           medianprops=medianprops, \n           whiskerprops=whiskerprops, \n           capprops=capprops, \n           flierprops=dict(markerfacecolor='r', marker='o'))\n\n# Plot Outliers\nfor i, outlier in enumerate(outliers):\n    if len(outlier) > 0:\n        ax.plot(np.repeat(i+1, len(outlier)), outlier, 'ro', markersize=8, alpha=0.7)\n\n# Adjust the chart\nax.set_title('Salary Distribution by Employee Type (2020)', fontsize=14, fontweight='bold')\nax.set_xlabel('Employee Type', fontsize=12)\nax.set_ylabel('Salary (USD)', fontsize=12)\nax.set_xticklabels(['Full Time', 'Part Time', 'Contract', 'Internship', 'Seasonal'], fontsize=10)\n\n# Add grids\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.6)\nax.set_axisbelow(True)\n\n# Resize the chart\nplt.tight_layout()\n\n# Save the chart\nplt.savefig('salary_box.png')\n\n# Clear the current image state\nplt.cla()"
    },
    {
    "import matplotlib.pyplot as plt\nimport numpy as np\n\ncategories = ['E-commerce', 'Social Media', 'Streaming Services', 'Online Gaming', 'EdTech']\nvalue_lists = [[61, 65, 80, 95, 110], [87, 70, 92, 100, 115], [49, 72, 48, 105, 120], [42, 68, 82, 94, 108], [68, 77, 90, 132, 112]]\noutliers_lists = [[], [110, 125], [125], [115, 120], [45]]\n\n# Create figure\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot()\n\n# Box plotting with updated style\nbp = ax.boxplot(value_lists, whis=1.5, notch=True, patch_artist=True, boxprops=dict(edgecolor='black', linewidth=1.5), whiskerprops=dict(color='darkblue', linewidth=1.5), medianprops=dict(color='orange', linewidth=2), capprops=dict(color='darkblue', linewidth=1.5))\n\n# Set the colors of the boxes\ncolors = ['#00008B', '#BDB76B', '#FF1493', '#696969', '#F0F8FF']\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n    patch.set_edgecolor('black')\n\n# Outliers plotting with updated style\nfor i, outliers in enumerate(outliers_lists):\n    if outliers:\n        x = [i + 1] * len(outliers)\n        ax.scatter(x, outliers, color='red', edgecolor='black', s=50, zorder=5)\n\n# Adding grid with a different style\nax.grid(True, linestyle='--', color='grey', alpha=0.7)\n\n# Set axes labels and title\nax.set_xticklabels(categories, rotation=45, ha=\"right\", fontsize=10)\nax.set_ylabel('User Experience Score', fontsize=12)\nax.set_title('User Experience Score Distribution by Internet Aspect (2022)', fontsize=14, fontweight='bold')\n\nplt.tight_layout()\n\n# Save and show the figure\nplt.savefig('experience_score_box.png')\nplt.show()\n\n# Clear current image state\nplt.clf()"
    },
    {
    "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\n# New data for the two subplots\n\ndata_1 = [[800, 1200, 1800, 2500, 3200], [600, 900, 1400, 2000, 2800], [700, 1100, 1500, 2200, 2900], [400, 700, 1000, 1600, 2300], [900, 1400, 1900, 2600, 3500]]\n\noutliers_1 = [[], [4000], [300, 5000], [2500], [4100]]\n\n\ndata_2 = [[500, 700, 1100, 1500, 1900], [300, 400, 600, 800, 1000], [450, 650, 900, 1300, 1700], [350, 500, 700, 900, 1200], [800, 1200, 1600, 2200, 3000]]\n\noutliers_2 = [[], [2500], [200, 4000], [1500], [3200]]\n\n\n# Create the figure and subplots with left and right arrangement\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))\n\n\n# Plot the first boxplot (left side)\n\nax1.boxplot(data_1, whis=1.5)\n\nfor i, outlier in enumerate(outliers_1):\n\n    if len(outlier) > 0:\n\n        ax1.plot([i + 1] * len(outlier), outlier, 'bo')\n\n\nax1.set_title('Employee Salaries in 2023')\n\nax1.set_ylabel('Salary (USD)')\n\nax1.set_xticklabels(['HR', 'Marketing', 'Finance', 'IT', 'Operations'], fontsize=10, rotation=30)\n\nax1.yaxis.grid(True)\n\n\n# Plot the second boxplot (right side)\n\nax2.boxplot(data_2, whis=1.5)\n\nfor i, outlier in enumerate(outliers_2):\n\n    if len(outlier) > 0:\n\n        ax2.plot([i + 1] * len(outlier), outlier, 'go')\n\n\nax2.set_title('Project Budgets in 2023')\n\nax2.set_ylabel('Budget (Million USD)')\n\nax2.set_xticklabels(['Project A', 'Project B', 'Project C', 'Project D', 'Project E'], fontsize=10, rotation=30)\n\nax2.yaxis.grid(True)\n\n\n# Adjust layout and display the plots\n\nplt.tight_layout()\n\n\n# Display the generated plot\n\nplt.show()\n\n"
    }
],

"bubble":[
    {
    "\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport numpy as np\n\n\n# New data labels and dataset related to economic sectors\n\ndata_labels = ['Investment (Billion $)', 'Market Share (%)', 'Profit Margin (Score)', 'Employees (Millions)']\n\ndata = [['Finance', 950, 25, 8.1, 5.5], ['Energy', 1200, 40, 7.8, 6.3], ['Healthcare', 800, 15, 7.5, 4.7], \n\n        ['Technology', 1100, 30, 9.0, 7.2], ['Real Estate', 650, 10, 6.8, 3.9], ['Telecom', 700, 20, 8.5, 4.3]]\n\nline_labels = [data[i][0] + ' ' + str(data[i][3]) for i in range(len(data))]\n\n\nfig = plt.figure(figsize=(8, 6))\n\nax = fig.add_subplot(1, 1, 1)\n\n\n# Normalize data for color mapping\n\nsc = None\n\nnorm = cm.colors.Normalize(vmin=np.min(np.array([data[i][4] for i in range(len(data))])), \n\n                           vmax=np.array([data[i][4] for i in range(len(data))]).max())\n\ns_m = cm.ScalarMappable(cmap=cm.get_cmap('viridis'), norm=norm)\n\ns_m.set_array([])\n\n\n# Scatter plot with size and color variation based on employees and profit margin\n\nfor i in range(len(data)):\n\n    sc = ax.scatter(data[i][1], data[i][2], \n\n                    s=(data[i][3] - 6.8) / (9.0 - 6.8) * (5000 - 600) + 600, \n\n                    c=s_m.to_rgba(data[i][4]), label=None)\n\n    ax.scatter([], [], c=s_m.to_rgba(data[i][4]), label=line_labels[i], s=20)\n\n\n# Add legend and color bar\n\nax.legend(title=data_labels[2])\n\n\ncbar = fig.colorbar(s_m, ax=ax)\n\ncbar.set_label(data_labels[3], rotation=90)\n\n\n# Set axis labels, ticks, and grid\n\nax.set_xticks(np.arange(200, 1301, 200))\n\nax.set_xlabel(data_labels[0])\n\nax.set_ylabel(data_labels[1])\n\nax.grid(linestyle='--')\n\n\n# Set title and layout\n\nplt.title('Global Economic Sector Performance in 2023')\n\nplt.tight_layout()\n\nplt.show()\n"
    },
    {
    "\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport numpy as np\n\n\n# New data labels and dataset related to economic sectors\n\ndata_labels = ['Investment (Billion $)', 'Market Share (%)', 'Profit Margin (Score)', 'Employees (Millions)']\n\ndata = [['Finance', 950, 25, 8.1, 5.5], ['Energy', 1200, 40, 7.8, 6.3], ['Healthcare', 800, 15, 7.5, 4.7], \n\n        ['Technology', 1100, 30, 9.0, 7.2], ['Real Estate', 650, 10, 6.8, 3.9], ['Telecom', 700, 20, 8.5, 4.3]]\n\nline_labels = [data[i][0] + ' ' + str(data[i][3]) for i in range(len(data))]\n\n\nfig = plt.figure(figsize=(8, 6))\n\nax = fig.add_subplot(1, 1, 1)\n\n\n# Normalize data for color mapping\n\nsc = None\n\nnorm = cm.colors.Normalize(vmin=np.min(np.array([data[i][4] for i in range(len(data))])), \n\n                           vmax=np.array([data[i][4] for i in range(len(data))]).max())\n\ns_m = cm.ScalarMappable(cmap=cm.get_cmap('viridis'), norm=norm)\n\ns_m.set_array([])\n\n\n# Scatter plot with size and color variation based on employees and profit margin, using solid circles ('o')\n\nfor i in range(len(data)):\n\n    sc = ax.scatter(data[i][1], data[i][2], \n\n                    s=(data[i][3] - 6.8) / (9.0 - 6.8) * (5000 - 600) + 600, \n\n                    c=s_m.to_rgba(data[i][4]), marker='o', label=None)\n\n    ax.scatter([], [], c=s_m.to_rgba(data[i][4]), marker='o', label=line_labels[i], s=20)\n\n\n# Add legend and color bar\n\nax.legend(title=data_labels[2])\n\n\ncbar = fig.colorbar(s_m, ax=ax)\n\ncbar.set_label(data_labels[3], rotation=90)\n\n\n# Set axis labels, ticks, and grid\n\nax.set_xticks(np.arange(200, 1301, 200))\n\nax.set_xlabel(data_labels[0])\n\nax.set_ylabel(data_labels[1])\n\nax.grid(linestyle='--')\n\n\n# Set title and layout\n\nplt.title('Global Economic Sector Performance in 2023')\n\nplt.tight_layout()\n\nplt.show()\n"
    }
],
"candlestick": [
    {
    "\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport mplfinance as mpf\n\n\n# Updated data related to the tech sector\n\ndata = {\n    'Date': ['2023-01-10', '2023-01-17', '2023-01-24', '2023-01-31', '2023-02-07', '2023-02-14', '2023-02-21', '2023-02-28', '2023-03-07', '2023-03-14'],\n    'Opening Price ($)': [105.0, 110.5, 112.0, 115.0, 113.3, 109.0, 112.0, 109.5, 108.0, 109.0],\n    'Closing Price ($)': [110.6, 112.5, 115.0, 113.3, 109.0, 112.0, 109.5, 108.0, 109.0, 110.8],\n    'High Price ($)': [112.3, 113.5, 117.0, 119.0, 115.0, 116.0, 117.0, 111.8, 112.0, 114.0],\n    'Low Price ($)': [102.7, 107.0, 109.0, 111.5, 105.0, 106.0, 108.0, 106.5, 106.0, 107.2]\n}\n\n\ndf = pd.DataFrame(data)\n\ndf['Date'] = pd.to_datetime(df['Date'])\n\ndf.set_index('Date', inplace=True)\n\ndf.rename(columns={'Opening Price ($)': 'Open', 'Closing Price ($)': 'Close', 'High Price ($)': 'High', 'Low Price ($)': 'Low'}, inplace=True)\n\n\n# Plot candlestick chart for the tech sector stock prices\n\nfig = plt.figure(figsize=(10, 6))\nmpf.plot(df, type='candle', title='Weekly Stock Price Trend in Tech Sector', figratio=(8, 6), \n         savefig=dict(fname='xxxx.png'))\nplt.close(fig)\n"
    },
    {
    "\nimport plotly.graph_objects as go\nimport pandas as pd\n\n# Updated data related to the biotechnology sector\n\ndata = [['2023-04-26', 120.5, 125.2, 127.8, 119.4],\n        ['2023-04-27', 125.0, 126.4, 128.7, 123.9],\n        ['2023-04-28', 126.4, 124.9, 127.5, 122.3],\n        ['2023-04-29', 124.9, 128.2, 129.5, 123.7],\n        ['2023-04-30', 128.5, 130.7, 132.3, 127.0],\n        ['2023-05-01', 130.7, 131.5, 133.8, 129.5],\n        ['2023-05-02', 131.5, 130.0, 132.0, 128.9],\n        ['2023-05-03', 130.0, 131.0, 132.4, 129.5]]\n\n\ndf = pd.DataFrame(data, columns=['Date', 'Open Price ($)', 'Close Price ($)', 'High Price ($)', 'Low Price ($)'])\n\n# Plot candlestick chart for biotechnology sector\n\nfig = go.Figure(data=[go.Candlestick(x=df['Date'],\n                                    open=df['Open Price ($)'],\n                                    high=df['High Price ($)'],\n                                    low=df['Low Price ($)'],\n                                    close=df['Close Price ($)'])])\nfig.update_layout(title='Biotechnology Stock Price Trend Overview',\n                  yaxis_range=[min(df['Low Price ($)']), max(df['High Price ($)'])],\n                  width=1800,\n                  height=1000,\n                  font=dict(family='Courier New, monospace', size=18, color='#7f7f7f'))\n\n# Save the figure to a new file related to biotechnology sector\nfig.write_image('biotech_sector_2024.png')\n"
    },
],

"funnel": [
    {
    "\nimport plotly.graph_objects as go\n\n# Create a funnel chart with updated data for the biology field\nfig = go.Figure(go.Funnel(\n    y=[\"Biology Basics\", \"Genetics\", \"Molecular Biology\", \"Biotechnology\", \"Biomedicine\"],\n    x=[150, 120, 90, 60, 30],\n    textinfo=\"value+percent initial\",\n    orientation=\"h\",\n    marker_color='green'\n))\n\n# Update layout with a new title and font settings\nfig.update_layout(\n    title_text='Education Level in Biology in 2023',\n    font=dict(\n        size=14\n    )\n)\n\n# Save the figure with a new filename related to biology field\nfig.write_image(\"funnel_biology_updated.png\")\n"
    },
    {
    "\nimport plotly.graph_objects as go\n\n# Create a funnel chart with updated data for the chemistry field\nfig = go.Figure(go.Funnel(\n    y=[\"Chemical Synthesis\", \"Purification\", \"Compound Characterization\", \"Toxicity Testing\", \"Scaling Up\", \"Product Delivery\"],\n    x=[3000, 2500, 2100, 1700, 1000, 600],\n    textinfo=\"value\",\n    textfont_size=14,\n    opacity=0.8,\n    marker={\"color\": [\"blue\", \"green\", \"purple\", \"orange\", \"yellow\", \"red\"]},\n))\n\n# Update layout with a new title and font settings\nfig.update_layout(\n    title={\"text\": \"Processes Completed in Chemical Production in 2023\"},\n    font={\"family\": \"Courier New, monospace\", \"size\": 14},\n    autosize=False,\n    width=800,\n    height=800,\n    showlegend=True,\n    xaxis_title=\"Number of Processes\",\n    yaxis_title=\"Stage\",\n    margin={\"l\": 140, \"b\": 40, \"t\": 140, \"r\": 40},\n    paper_bgcolor=\"white\",\n    plot_bgcolor=\"white\",\n    legend={\"x\": 0.82, \"y\": 0.95},\n)\n\n# Save the figure with a new filename related to chemistry field\nfig.write_image(\"funnel_chemistry_2023.png\")\n"
    }
],
"heatmap": [
    {
    "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Process the updated data for political field\n\ndata = {'Country': ['Germany', 'United Kingdom', 'United States', 'Russia', 'China'], \n        'Political Stability (Index)': [70, 75, 60, 50, 65], \n        'Government Effectiveness (Index)': [80, 85, 78, 55, 70], \n        'Corruption Control (Index)': [65, 80, 68, 40, 55], \n        'Press Freedom (Index)': [72, 75, 60, 30, 50], \n        'Judicial Independence (Index)': [78, 82, 70, 45, 60]}\ndf = pd.DataFrame(data)\n\n# Plot the heatmap chart\n\nfig, ax = plt.subplots(figsize=(10, 6))\nim = ax.imshow(df.iloc[:, 1:].values, cmap='Blues')\n\n# Set the ticks and ticklabels for x and y axis\nax.set_xticks(np.arange(len(df.columns[1:])))\nax.set_yticks(np.arange(len(df['Country'])))\nax.set_xticklabels(df.columns[1:])\nax.set_yticklabels(df['Country'])\n\n# Rotate the x-axis tick labels by 45 degrees and align them to the right\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Center the ticks and ticklabels\nax.tick_params(axis='both', which='both', length=0.5, pad=10)\nax.tick_params(axis='x', which='major', pad=20)\nax.tick_params(axis='y', which='major', pad=10)\n\n# Create a colorbar and add the label\ncbar = ax.figure.colorbar(im)\ncbar.ax.set_ylabel('Index Values', rotation=-90, va=\"bottom\", labelpad=20)\n\n# Show the value of each cell\nfor i in range(len(df['Country'])):\n    for j in range(len(df.columns[1:])):\n        text = ax.text(j, i, df.iloc[i, j+1], ha=\"center\", va=\"center\", color=\"black\")\n\n# Set the title\nax.set_title('Political Metrics by Country')\n\n# Automatically resize the image and save it\nfig.tight_layout()\nplt.savefig('political_metrics_heatmap_2023.png', bbox_inches='tight')\n\n# Clear the current image state\nplt.clf()\nplt.close()\n"
    },
    {
    "\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\n# Updated random data for the technology sector\n\ndata = {'Category': ['AI', 'Blockchain', 'Cloud Computing', 'Cybersecurity', 'IoT'], \n        'Research': [70, 65, 90, 85, 75], \n        'Development': [60, 70, 85, 80, 65], \n        'Adoption': [50, 45, 75, 65, 60], \n        'Market Growth': [80, 75, 95, 85, 70], \n        'User Engagement': [75, 70, 80, 90, 65], \n        'Investment': [85, 80, 95, 90, 70]}\ndf = pd.DataFrame(data, columns = ['Category', 'Research', 'Development', 'Adoption', 'Market Growth', 'User Engagement', 'Investment'])\ndf = df.set_index('Category')\n\n# Plotting the heatmap\n\nfig, ax = plt.subplots(figsize=(10, 6))\nsns.heatmap(df, annot=True, cmap='coolwarm', linewidths=.5, cbar=True, ax=ax)\n\n# Setting ticks and ticklabels\nax.set_xticks(np.arange(len(df.columns)) + 0.5, minor=False)\nax.set_yticks(np.arange(len(df)) + 0.5, minor=False)\nax.set_xticklabels(df.columns, minor=False)\nax.set_yticklabels(df.index, minor=False)\n\n# Rotating and wrapping the labels\nplt.setp(ax.get_xticklabels(), rotation=45, ha='right', rotation_mode='anchor')\nplt.setp(ax.get_yticklabels(), wrap=True)\n\n# Setting ticks and ticklabels in the center\nax.tick_params(axis='both', which='both', length=0, labelsize=12)\nax.tick_params(axis='x', which='major', pad=15)\nax.tick_params(axis='y', which='major', pad=15)\n\n# Title and labels\nplt.title('Technology Sector Performance Metrics', fontsize=15)\nplt.xlabel('Metrics', fontsize=12)\nplt.ylabel('Technology Areas', fontsize=12)\n\n# Resizing and saving the figure\nplt.tight_layout()\nplt.savefig('technology_sector_heatmap_2023.png', bbox_inches='tight')\n\n# Clearing the plot\nplt.clf()\n"
    }
],
"multi-axes":[
    {
    "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\n# Generate data for the bar chart and line plot\n\ncategories = ['A', 'B', 'C', 'D', 'E']\n\nbar_values = [30, 50, 45, 70, 65]\n\nline_values1 = [20, 35, 50, 65, 80]\n\nline_values2 = [15, 30, 55, 60, 85]\n\nline_values3 = [10, 40, 30, 50, 60]\n\n\n# Set up the figure and axes\n\nfig, ax1 = plt.subplots(figsize=(10, 6))\n\n\n# Plot the bar chart\n\nbar_width = 0.4\n\nindex = np.arange(len(categories))\n\nbars = ax1.bar(index, bar_values, bar_width, color='b', label='Bar Data')\n\n\n# Set up a secondary axis for the line plot\n\nax2 = ax1.twinx()\n\n\n# Plot three lines on top of the bars to make the plot more complex\n\nline1 = ax2.plot(index, line_values1, color='r', marker='o', label='Line Data 1', linestyle='--', linewidth=2)\n\nline2 = ax2.plot(index, line_values2, color='g', marker='x', label='Line Data 2', linestyle=':', linewidth=2)\n\nline3 = ax2.plot(index, line_values3, color='purple', marker='s', label='Line Data 3', linestyle='-.', linewidth=2)\n\n\n# Add data labels to the bar chart\n\nfor bar in bars:\n\n    height = bar.get_height()\n\n    ax1.text(bar.get_x() + bar.get_width() / 2.0, height, f'{height}', ha='center', va='bottom', fontsize=10, color='black')\n\n\n# Add data labels to the line plots\n\nfor i, txt in enumerate(line_values1):\n\n    ax2.annotate(txt, (index[i], line_values1[i]), textcoords=\"offset points\", xytext=(0,5), ha='center', fontsize=8, color='r')\n\nfor i, txt in enumerate(line_values2):\n\n    ax2.annotate(txt, (index[i], line_values2[i]), textcoords=\"offset points\", xytext=(0,5), ha='center', fontsize=8, color='g')\n\nfor i, txt in enumerate(line_values3):\n\n    ax2.annotate(txt, (index[i], line_values3[i]), textcoords=\"offset points\", xytext=(0,5), ha='center', fontsize=8, color='purple')\n\n\n# Customize the appearance\n\nax1.set_xlabel('Categories', fontsize=12)\n\nax1.set_ylabel('Bar Values', fontsize=12, color='b')\n\nax2.set_ylabel('Line Values', fontsize=12, color='r')\n\nax1.set_title('Complex Bar and Line Plot', fontsize=16)\n\n\n# Set the ticks and gridlines for both axes\n\nax1.set_xticks(index)\n\nax1.set_xticklabels(categories, fontsize=10)\n\nax1.grid(True, which='major', axis='y', linestyle='--', linewidth=0.7)\n\nax2.grid(True, which='major', axis='y', linestyle=':', linewidth=0.5)\n\n\n# Add legends for both bar and line data\n\nbars_legend = ax1.legend(loc='upper left')\n\nlines_legend = ax2.legend(loc='upper right')\n\n\n# Adjust layout and show the plot\n\nplt.tight_layout()\n\nplt.show()\n\n"
    },
    {
    "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\n# Generate data for the bar chart and line plots\n\ncategories = ['A', 'B', 'C', 'D', 'E']\n\nbar_values1 = [30, 50, 45, 70, 65]\n\nline_values1 = [20, 35, 50, 65, 80]\n\n\nbar_values2 = [40, 60, 55, 75, 85]\n\nline_values2 = [25, 40, 60, 70, 90]\n\n\n# Set up the figure with two subplots, side by side\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6))\n\n\n# First subplot: bar chart and line plot\n\nbar_width = 0.4\n\nindex = np.arange(len(categories))\n\nbars1 = ax1.bar(index, bar_values1, bar_width, color='blue', label='Bar Data 1')\n\nax3 = ax1.twinx()\n\nline1 = ax3.plot(index, line_values1, color='red', marker='o', label='Line Data 1', linestyle='--', linewidth=2)\n\n\n# Customize the first subplot\n\nax1.set_xlabel('Categories', fontsize=12)\n\nax1.set_ylabel('Bar Values', fontsize=12, color='blue')\n\nax3.set_ylabel('Line Values', fontsize=12, color='red')\n\nax1.set_title('Bar and Line Plot (Left)', fontsize=16)\n\nax1.set_xticks(index)\n\nax1.set_xticklabels(categories, fontsize=10)\n\nax1.grid(True, which='major', axis='y', linestyle='--', linewidth=0.7)\n\nax3.grid(True, which='major', axis='y', linestyle=':', linewidth=0.5)\n\n\n# Add legends for the first subplot\n\nbars1_legend = ax1.legend(loc='upper left')\n\nline1_legend = ax3.legend(loc='upper right')\n\n\n# Second subplot: bar chart and line plot\n\nbars2 = ax2.bar(index, bar_values2, bar_width, color='green', label='Bar Data 2')\n\nax4 = ax2.twinx()\n\nline2 = ax4.plot(index, line_values2, color='purple', marker='s', label='Line Data 2', linestyle='-', linewidth=2)\n\n\n# Customize the second subplot\n\nax2.set_xlabel('Categories', fontsize=12)\n\nax2.set_ylabel('Bar Values', fontsize=12, color='green')\n\nax4.set_ylabel('Line Values', fontsize=12, color='purple')\n\nax2.set_title('Bar and Line Plot (Right)', fontsize=16)\n\nax2.set_xticks(index)\n\nax2.set_xticklabels(categories, fontsize=10)\n\nax2.grid(True, which='major', axis='y', linestyle='--', linewidth=0.7)\n\nax4.grid(True, which='major', axis='y', linestyle=':', linewidth=0.5)\n\n\n# Add legends for the second subplot\n\nbars2_legend = ax2.legend(loc='upper left')\n\nline2_legend = ax4.legend(loc='upper right')\n\n\n# Adjust layout and display the plot\n\nplt.tight_layout()\n\nplt.show()\n\n"
    }
],

"radar": [
    {
    "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\n# Updated data related to the environmental sector\n\ndata_labels = ['Air Quality', 'Water Quality', 'Biodiversity', 'Waste Management']\n\nline_labels = ['Urban Areas', 'Rural Areas', 'Industrial Areas', 'Protected Areas', 'Residential Areas']\n\ndata = np.array([[65, 70, 75, 80], [80, 78, 82, 85], [55, 60, 65, 68], [75, 73, 70, 72], [60, 58, 62, 65]])\n\n\n# Plot\n\nfig = plt.figure()\n\nax = fig.add_subplot(111, polar=True)\n\nangles = np.linspace(0, 2*np.pi, len(data_labels)+1, endpoint=True)\n\ndata = np.concatenate((data, data[:, 0:1]), axis=1)\n\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels)\n\nax.set_ylim(0, 100)\n\n\nfor i, line in enumerate(data):\n\n    ax.plot(angles, line, linewidth=1.5, label=line_labels[i])\n\n    ax.fill(angles, line, alpha=0.2)\n\n\n# Customize the plot\n\nhandles, labels = ax.get_legend_handles_labels()\n\nax.legend(handles, labels, loc=(0.9, 0.95), fontsize=10)\n\nax.set_title('Environmental Performance - 2023', va='bottom', fontsize=15)\n\n\n# Save the figure with the new filename\n\nplt.tight_layout()\n\nplt.savefig('/cpfs01/user/environment_performance_2023.png')\n\nplt.clf()\n\n"
    },
    {
    "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\n# Random data for healthcare performance metrics\n\ndata = np.array([[85, 80, 90, 88, 82],\n                 [78, 75, 85, 80, 75],\n                 [90, 92, 88, 85, 87],\n                 [80, 78, 85, 83, 79],\n                 [75, 80, 85, 82, 77],\n                 [88, 85, 90, 89, 84]])\n\n\ndata_labels = [\"Patient Satisfaction (Score)\", \"Treatment Success (Score)\", \"Efficiency (Score)\",\n               \"Accessibility (Score)\", \"Innovation (Score)\"]\n\nline_labels = [\"General Care\", \"Surgery\", \"Pharmaceuticals\", \"Pediatrics\", \"Mental Health\", \"Diagnostics\"]\n\n\nfig = plt.figure(figsize=(10, 10))\n\nax = fig.add_subplot(111, polar=True)\n\n\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\n\ndata = np.concatenate((data, data[:, 0:1]), axis=1)\n\n\n# Colors for the lines\n\ncolors = ['#FF6347', '#4682B4', '#32CD32', '#FFD700', '#8A2BE2', '#FF69B4']\n\nfor i in range(len(data)):\n\n    ax.plot(angles, data[i], color=colors[i], label=line_labels[i])\n\n    ax.fill(angles, data[i], color=colors[i], alpha=0.25)\n\n\n# Customizing the ticks and grid\n\nax.set_xticks(angles[:-1])\n\nax.set_xticklabels(data_labels)\n\nax.set_yticklabels([])\n\n\n# Adding the y-axis grid and labels\n\nmax_value = np.amax(data)\n\nstep_size = max_value / 5\n\nax.set_rgrids([step_size * i for i in range(1, 6)], labels=[f'{step_size * i:.1f}' for i in range(1, 6)], angle=0)\n\n\n# Setting the title\n\nax.set_title(\"Healthcare Performance Metrics - 2023\", fontsize=16)\n\n\n# Add legend\n\nhandles, labels = ax.get_legend_handles_labels()\n\nax.legend(handles, labels, loc='upper right')\n\n\n# Saving and displaying the plot\n\nplt.tight_layout()\n\nplt.savefig('healthcare_performance_2023.png')\n\nplt.show()\n\n"
    },
    {
    "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\n# Updated data for the education sector\n\ndata_labels = ['Student Engagement', 'Teaching Quality', 'Infrastructure', 'Extracurricular Activities', 'Funding']\n\nline_labels = ['School A', 'School B', 'School C', 'School D']\n\ndata = np.array([[88, 92, 85, 87], [82, 85, 78, 80], [78, 75, 80, 82], [85, 88, 82, 84], [90, 92, 88, 89]])\n\n\n# Create figure before plotting\n\nfig = plt.figure(figsize=(10, 10))\n\nax = fig.add_subplot(111, polar=True)\n\n\n# Evenly space the axes for the number of data points\n\nangles = np.linspace(0, 2 * np.pi, len(data_labels) + 1, endpoint=True)\n\n\n# Iterate over each row in the data array, append the first numerical element of that row to its end for close-loop plotting of data lines\n\nfor i in range(len(line_labels)):\n\n    data_row = np.append(data[:, i], data[0, i])\n\n    ax.plot(angles, data_row, linewidth=2, label=line_labels[i])\n\n    ax.fill(angles, data_row, alpha=0.25)\n\n\n    # Generate a angle-like radius vector with constant values\n\n    angle_r = np.full_like(angles, (i+1) * np.max(data) / len(line_labels))\n\n    ax.plot(angles, angle_r, '--', alpha=0.25, color='black')\n\n\n# Plot the axis label by using set_thetagrids\n\nax.set_thetagrids(angles[:-1] * 180/np.pi, data_labels, fontsize=14)\n\n\n# Adjust the radial limits to accommodate the maximum of data\n\nax.set_ylim(0, np.max(data))\n\n\n# Plot the data lines legend\n\nhandles, labels = ax.get_legend_handles_labels()\n\nax.legend(handles, labels, loc=(0.9, 0.95), fontsize=14)\n\n\n# Remove the circular gridlines and background\n\nax.yaxis.grid(False)\n\nax.spines['polar'].set_visible(False)\n\n\n# Set the title of the figure\n\nplt.title('Education Performance Evaluation', fontsize=18)\n\n\n# Automatically resize the image by tight_layout\n\nplt.tight_layout()\n\n\n# Save the image with the new filename\n\nplt.savefig('education_performance_2023.png')\n\n\n# Clear the current image state\n\nplt.clf()\n"
    }
],

"ring": [
    {
    "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\n# Updated random data for the healthcare sector\n\ndata_labels = ['Patient Satisfaction', 'Treatment Time', 'Resource Usage', 'Cost Efficiency', 'Success Rate']\n\nline_labels = ['Metric', 'ratio']\n\ndata = np.array([[25, 20, 15, 30, 10]])\n\n\n# Create the pie chart\n\nfig, ax = plt.subplots(figsize=(8, 8))\n\nax.pie(data.flatten(), labels=data_labels, startangle=90, counterclock=False, colors=['#ff9999', '#66b3ff', '#99ff99', '#ffcc99', '#c2c2f0'])\n\n\n# Add a white circle in the center to create a donut chart effect\n\ncircle = plt.Circle((0, 0), 0.6, color='white')\n\nax.add_artist(circle)\n\n\n# Add legend and title\n\nax.legend(data_labels, loc='upper left')\n\nax.set_title('Healthcare Performance Overview - 2023')\n\n\n# Save and display the plot\n\nplt.tight_layout()\n\nplt.savefig('healthcare_performance_overview_2023.png')\n\nplt.show()\n\n"
    },
    {
    "import matplotlib.pyplot as plt\nlabels = ['CPU Utilization', 'Memory Usage', 'Disk I/O', 'Network Latency']\nmodel_a_data = [30, 40, 20, 10]\nmodel_b_data = [25, 35, 30, 10]\ncolors = ['#ff7f7f', '#4682b4', '#32cd32', '#deb887']\ntitles = ['Model A Performance', 'Model B Performance']\nfig, ax = plt.subplots(1, 2, figsize=(12, 6))\nax[0].pie(model_a_data, labels=labels, colors=colors, startangle=90, counterclock=False, autopct='%1.1f%%', wedgeprops=dict(width=0.3))\nax[0].set_title(titles[0])\nax[1].pie(model_b_data, labels=labels, colors=colors, startangle=90, counterclock=False, autopct='%1.1f%%', wedgeprops=dict(width=0.3))\nax[1].set_title(titles[1])\nplt.tight_layout()\nplt.savefig('computer_model_performance_pie_chart.png', bbox_inches='tight')\nplt.show()"
    },
    {
    "import matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport numpy as np\n\n# Data for Environmental Protection Measures\ndata_labels = ['Air Pollution Control', 'Water Conservation', 'Waste Management', 'Forest Preservation', 'Renewable Energy']\ndata = [20, 25, 15, 25, 15]\nline_labels = ['Category', 'Ratio']\n\n# Create figure and axis\nfig = plt.figure(figsize=(12, 9))\nax = fig.add_subplot(111)\n\n# New color scheme (using 'viridis' colormap for a modern look)\ncolors = plt.cm.viridis(np.linspace(0, 1, len(data_labels)))\n\n# Explode the slices (only highlight the second and fourth slice)\nexplode = [0, 0.1, 0, 0.1, 0]\n\n# Create a pie chart with updated colors and explode effect\nax.pie(data, labels=data_labels, explode=explode, colors=colors, autopct='%1.1f%%',\n       textprops={'fontsize': 14}, startangle=140, counterclock=False)\n\n# Adding a white circle in the center for a \"donut\" effect\ncentre_circle = plt.Circle((0, 0), 0.65, fc='white')\nax.add_artist(centre_circle)\n\n# Add a legend in the upper left corner\nax.legend(data_labels, loc='upper left', bbox_to_anchor=(-0.15, 1.05), fontsize=12)\n\n# Set title for the chart\nax.set_title('Environmental Protection Measures - 2023', fontsize=18)\n\n# Make layout tight to avoid overlap\nplt.tight_layout()\n\n# Save the figure to a specific path\nplt.savefig('environmental_protection_ring_chart.png')\n\n# Clear the figure to free memory\nplt.clf()"
    }
],

"rose":[
    {
    "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for Renewable Energy Production\ndata_labels = ['Solar', 'Wind', 'Hydropower', 'Geothermal', 'Biomass', 'Tidal', 'Nuclear', 'Wave']\ndata = [85, 70, 90, 65, 60, 40, 75, 30]\n\n# Create the figure\nfig = plt.figure(figsize=(10, 10))\nax = fig.add_subplot(1, 1, 1, projection='polar')\n\n# Calculate the angle for each sector\nsector_angle = (2 * np.pi) / len(data_labels)\n\n# Plot each bar in the polar chart\nfor i, datum in enumerate(data):\n    ax.bar(sector_angle * i, datum, width=sector_angle, alpha=0.7, label=data_labels[i], color=plt.cm.Paired(i))\n\n# Set the tick marks and labels\nax.set_xticks(np.arange(0, 2 * np.pi, sector_angle))\nax.set_xticklabels(data_labels, fontsize=12)\n\n# Adjust label positioning and alignment based on their angle\nfor label, angle in zip(ax.get_xticklabels(), np.arange(0, 2 * np.pi, sector_angle)):\n    if 0 <= angle < np.pi / 2 or 3 * np.pi / 2 <= angle <= 2 * np.pi:\n        label.set_horizontalalignment('left')  # Right side of the plot\n    else:\n        label.set_horizontalalignment('right')  # Left side of the plot\n\n# Adjust the legend position and avoid label overlap\nax.legend(bbox_to_anchor=(1.1, 1.05), loc='upper left', fontsize=10)\n\n# Set chart title with larger font\nax.set_title('Global Renewable Energy Production in 2023', fontsize=16, pad=20)\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Save the figure with a new file name\nplt.savefig('/mnt/data/global_renewable_energy_polar_chart_aligned.png')\n\n# Clear the plot to free memory\nplt.clf()"
    },
],

"treemap":[
    {
    "import plotly.express as px\nimport os\nimport pandas as pd\n\n# New data for a different professional field (e.g., Research Funding Allocation in Energy Sectors)\ndata_labels = ['Energy Research Funding Allocation (%)']\nline_labels = ['Solar Energy', 'Wind Energy', 'Hydropower', 'Geothermal Energy', \n               'Biomass Energy', 'Nuclear Energy', 'Hydrogen', 'Energy Storage']\ndata = [25, 20, 15, 10, 10, 8, 7, 5]\n\n# Create a DataFrame for Plotly\ndf = pd.DataFrame(list(zip(line_labels, data)), columns=['Energy Sector', 'Funding Allocation'])\n\n# Create treemap using Plotly Express\nfig = px.treemap(df, path=['Energy Sector'], values='Funding Allocation',\n                 title='Research Funding Allocation Across Various Energy Sectors in 2023',\n                 color='Funding Allocation', color_continuous_scale='Viridis')\n\n# Customize the layout\nfig.update_layout(margin=dict(t=50, l=25, r=25, b=25))\n\n# Define the save path for the figure\nsave_path = 'energy_funding_treemap.png'\n\n# Save the figure\nfig.write_image(save_path)\n"
    },
    {
    "import matplotlib.pyplot as plt\nimport squarify\nimport os\n\n# New data for a different professional field (e.g., Global Market Share in Renewable Energy)\ndata_labels = ['Solar Power', 'Wind Power', 'Hydropower', 'Geothermal Energy', 'Biomass', 'Tidal Energy', 'Hydrogen', 'Nuclear Energy']\nline_labels = ['Market Share (%)']\ndata = [35, 25, 15, 10, 5, 5, 3, 2]\n\n# Define a new color palette with better contrast (Set3)\ncolors = plt.cm.Set3.colors[:len(data_labels)]\n\n# Create a larger figure to prevent overlap and enhance readability\nplt.figure(figsize=(12, 8))\n\n# Create a treemap with the new data and color scheme\nsquarify.plot(sizes=data, label=data_labels, color=colors, alpha=0.7, text_kwargs={'fontsize':12})\n\n# Add a title with updated font size and style\nplt.title('Global Market Share in Renewable Energy Sectors (2023)', fontsize=16, pad=20)\n\n# Remove the axes for a cleaner look\nplt.axis('off')\n\n# Adjust layout to prevent content from getting cut off\nplt.tight_layout()\n\n# Define the save path for the figure\nsave_path = 'renewable_energy_treemap_set.png'\n\n# Save the figure\nplt.savefig(save_path, dpi=300)\n\n# Clear the current image state to keep the environment clean\nplt.clf()\n"
    }
],
}

code_none = {
    "Hide axis":
    """
ax.axis('off')
"""
}

packages = {
    "matplotlib": "matplotlib",
    "none": "whatever you want"
}

def disk_data_prompt(domain):
    prompt = f"Generate data related to {domain}, pay attention to requirements above and below:\n"
    requirements = (
        "Requirements:\n"
        "The data generated should in a following format. Here is an example: Label,item,item,item\nlabel,1000,4000,10000\nlabel,1200,4500,11000\nlabel,1500,4800,12000\nlabel,1800,5000,13000\n"
        "The imitation is as irrelevant as possible to the example. For example, you should generated data from all kinds of different fields and modify the labels and items with corresponding components. The data must have at least but not limited to 1 rows and 1 columns, 3, 4, 5 are all okay\n"
        "Generate only one set of json data.\n"
        'Don\'t generate any other content except {"csv_data": "..."}\n'
    )
    return prompt + requirements


def disk_caption_prompt(chart_type):
    prompt = f"Generate caption for the {chart_type} chart data.\n"
    requirements = (
        "Requirements:\n"
        "The caption should be brief and concise. It's best to keep it under five words\n"
        "The caption should describe the general content of the line chart data.\n"
        'Don\'t generate any other content except {"caption": "..." }'
    )
    return prompt + requirements


def disk_code_prompt(csv_data, title, additional_format_spec, chart_type):
    # color control
    random.shuffle(colors)
    prompt = f"Generate high quality python code for plotting {chart_type} chart.\n"

    # external = random.choice(["pyecharts", "matplotlib"])
    # external = random.choice(["pyecharts", "none"])
    external = random.choice(["matplotlib"])
    # chart_type = random.choice(chart_types)
    code_matplotlib = random.choice(chart_examples[chart_type])
    if external == "matplotlib":
        code_examples = code_matplotlib
        spec_req = {
            "figure size": "no larger than 1200 * 1200 pixels",
            "font size": "use medium fonts (for scale labels and title)",
        }
    else:
        code_examples = code_none
        spec_req = {
            "font size": "use large fonts (for scale labels and title)",
        }

    # general requirements
    general_spec = {
        "The generated code should not too complicated and the words cannot overlap each other"
        "title": f"{title}",
        "palette": f"{colors}",
        "grid visibility": f"{grid_visibility}",
        "grid line style":  f"{grid_line_styles}",
        "line style":  f"{line_styles}",
        "marker style": f"{marker_styles}",
        "bar styles": f"{bar_styles}",
        "arrangement":  f"{bar_arrangement}",
        "font type": f"{font_types}",
        "lengend postion": f"{legend_positions}",
        "tick label styles": f"{tick_label_styles}",
        "error filling symbol": "plt.fill_between()",
        "components": "x-axis, y-axis, bars, label, title, legends, line style, marker style, grid visibility, bar styles, arrangement, font type, palette, gridlines(optional), axis titles, ticks. No overlap between all components",
        "color": "the color used in the palette should be recognizable, so it's a little bit darker",
        "modification": "the components in the sample code chould be replace, usually use the solid line but not limited by items in palette, bar style, arrangement, font type, lengend postion, tick label styles, line style, marker style, grid visibility", 
        "IMPORTANT NOTE": "further modification should be made in the number of the subfigures (choose from {1, 2, 3}), do not always generate code for one subfigures, generate two subfigures horizontally or vertically",
        "bar/pie chart visualization": "to better show the bar/pie chart, the bar/pie filling symbol and tick label styles coule be further modified, but in most cases, you do not need to modify these parameters",
        "line chart visualization": "to better show the line chart, the line could be filled using error filling symbol for further modification, the error could be generated directly without data, but in most cases, you do not need to modify these parameters",
        "font family": f"replace the font type in the sample code with {random.choice(font_types)}",
    }

    requirements = (
        "Requirements:\n"
        f"The code must present data: {csv_data} in a reasonable way"
        f"The code should use packages {packages[external]}.\n"
        f"The code example (given in JSON format) is {code_examples}.\n"
        "You must not be limited by the code sample and draw different styles of dials.\n"
        f"The code must conform general requirements (given in JSON format):\n{json.dumps(general_spec, indent=2)}.\n"
        f"The code must conform specific requirements (given in JSON format):\n{json.dumps(spec_req, indent=2)}.\n"
    )
    if additional_format_spec is not None:
        requirements += f"The code must conform additional requirements (given in JSON format):\n{json.dumps(additional_format_spec, indent=2)}\n"

    requirements += "Output format: ```python ... ```\n"

    return prompt + requirements

